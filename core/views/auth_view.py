from django.core.exceptions import ObjectDoesNotExistfrom rest_framework.views import APIViewfrom rest_framework import genericsfrom rest_framework.response import Responsefrom rest_framework import statusfrom rest_framework import permissionsfrom rest_framework_simplejwt.views import TokenObtainPairViewfrom django.contrib.auth.models import Userfrom core.serializers import auth_serializerfrom util.custom_response import prepare_error_responseclass RegisterView(generics.CreateAPIView):    queryset = User.objects.all()    permission_classes = (permissions.AllowAny,)    serializer_class = auth_serializer.RegistrationSerializerclass LoginAPIView(TokenObtainPairView):    permission_classes = (permissions.AllowAny,)    serializer_class = auth_serializer.LoginSerializerclass ProfileView(APIView):    permission_classes = [permissions.IsAuthenticated]    def get(self, request):        try:            queryset = User.objects.get(id=self.request.user.id)            serializer = auth_serializer.UserSerializer(queryset)            return Response(serializer.data, status=status.HTTP_200_OK)        except User.DoesNotExist:            return Response(prepare_error_response('Sorry! User must be login'), status=status.HTTP_400_BAD_REQUEST)class ChangePasswordView(generics.UpdateAPIView):    queryset = User.objects.all()    permission_classes = (permissions.IsAuthenticated,)    serializer_class = auth_serializer.PasswordUpdateSerializerclass LogoutAPIView(APIView):    def post(self, request, *args, **kwargs):        response_data = {            'status': status.HTTP_204_NO_CONTENT,            'message': 'Successfully logout.'        }        try:            request.user.auth_token.delete()            return Response(data=response_data)        except (AttributeError, ObjectDoesNotExist):            response_data['status'] = status.HTTP_400_BAD_REQUEST            response_data['message'] = "Failed to logout. Please contact."            return Response(data=response_data)