from rest_framework import serializersfrom rest_framework_simplejwt.serializers import TokenObtainPairSerializerfrom django.contrib.auth.password_validation import validate_passwordfrom rest_framework.validators import UniqueValidatorfrom django.contrib.auth.models import Userfrom core.models.profile import Profileclass UserSerializer(serializers.ModelSerializer):    class Meta:        model = User        fields = (            'id', 'username', 'email', 'fist_name', 'last_name'        )class ProfileSerializer(serializers.ModelSerializer):    class Meta:        model = Profile        fields = [            'id', 'user', 'user', 'role', 'date_of_birth', 'gender',            'mobile', 'address', 'created_at', 'updated_at'        ]    def to_representation(self, instance):        response = super().to_representation(instance)        response['user'] = UserSerializer(instance.user).data        return response# The serializer for user loginclass LoginSerializer(TokenObtainPairSerializer):    @classmethod    def get_token(cls, user):        token = super(LoginSerializer, cls).get_token(user)        # Add custom claims        token['username'] = user.username        return token# Registration Serializerclass RegistrationSerializer(serializers.ModelSerializer):    email = serializers.EmailField(        required=True,        validators=[UniqueValidator(queryset=User.objects.all())]    )    password = serializers.CharField(write_only=True, required=True, validators=[validate_password])    password2 = serializers.CharField(write_only=True, required=True)    class Meta:        model = User        fields = (            'username', 'email', 'first_name', 'last_name', 'password', 'password2'        )    def validate(self, attrs):        if attrs['password'] != attrs['password2']:            raise serializers.ValidationError({'password': 'Sorry! password not match'})        return attrs    def create(self, validated_data):        user_instance = User.objects.create(            username=validated_data['username'],            email=validated_data['email'],            first_name=validated_data['first_name'],            last_name=validated_data['last_name']        )        user_instance.set_password(validated_data['password'])        user_instance.save()        return user_instance# Change password serializerclass PasswordUpdateSerializer(serializers.ModelSerializer):    password = serializers.CharField(write_only=True, required=True, validators=[validate_password])    password2 = serializers.CharField(write_only=True, required=True)    old_password = serializers.CharField(write_only=True, required=True)    class Meta:        model = User        fields = [            'id', 'password', 'password2', 'old_password'        ]    def validate(self, attrs):        if attrs['password'] != attrs['password2']:            raise serializers.ValidationError({'password': 'Sorry! password not match'})        return attrs    # When user change password then the method will call.    def validate_old_password(self, value):        user = self.context['request'].user        if not user.check_password(value):            raise serializers.ValidationError({"old_password": "Old password is not correct"})        return value    def update(self, instance, validated_data):        instance.set_password(validated_data['password'])        instance.save()        return instance# Forgot or reset password serializerclass ResetPasswordSerializer(serializers.ModelSerializer):    username = serializers.CharField(max_length=100)    password = serializers.CharField(max_length=100)    class Meta:        model = User        fields = [            'id', 'username', 'password'        ]    def save(self):        username = self.validated_data['username']        password = self.validated_data['password']        if User.objects.filter(username=username).exists():            user = User.objects.get(username=username)            user.set_password(password)            user.save()            return user        else:            raise serializers.ValidationError({'error': 'please enter valid crendentials'})