import datetimefrom django.contrib.auth.models import Userfrom django.utils.timezone import nowfrom core.models.role import Rolefrom django.db import modelsfrom django.db.models.signals import post_savefrom core.helpers.enums import GenderEnumfrom core.models.base import BaseEntityclass Profile(BaseEntity):    user = models.OneToOneField(User, on_delete=models.CASCADE, related_name='user_profile')    role = models.ForeignKey(Role, on_delete=models.SET_NULL, null=True)    date_of_birth = models.DateField(verbose_name="Birth Date", default=now, null=True)    gender = models.CharField(choices=GenderEnum.choices(), default=GenderEnum.MALE.value, max_length=10)    mobile = models.CharField(max_length=16, unique=True, null=True, blank=False)    address = models.CharField(max_length=255, null=True, blank=True)    is_active = models.BooleanField(default=True)    avatar = models.ImageField(upload_to='profile', blank=True, null=True)    def __str__(self):        return self.user.username    @property    def name(self):        try:            return self.user.username        except AttributeError:            return 'N/A'    @property    def make_full_name(self):        return f"{self.user.first_name} {self.user.last_name}"    @property    def get_photo_url(self):        if self.avatar and hasattr(self.avatar, 'url'):            return self.avatar.url        else:            return "/static/images/avatar.jpg"    def calculate_age(self):        age = datetime.date.today() - self.date_of_birth        return int(age.days / 365.25)def create_user_profile(sender, instance, created, **kwargs):    if created:        profile, created = Profile.objects.get_or_create(user=instance)        return profilepost_save.connect(create_user_profile, sender=User)